use std::collections::HashMap;
use crate::structs::InstrDescr;
use crate::enums::InstrType;

pub fn get_instr_table() -> HashMap<&'static str, InstrDescr> {
    let instr_table: HashMap<&str, InstrDescr> = HashMap::from([
        ("ADD", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0x8000}}),
        ("SUB", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0x9000}}),
        ("AND", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xA000}}),
        ("ANDN", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xB000}}),
        ("OR", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xC000}}),
        ("ORN", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xD000}}),
        ("XOR", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xE000}}),
        ("XNOR", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xF000}}),
        ("ADDi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0x8800}}),
        ("SUBi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0x9800}}),
        ("ANDi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0xA800}}),
        ("ANDNi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0xB800}}),
        ("ORi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0xC800}}),
        ("ORNi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0xD800}}),
        ("XORi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0xE800}}),
        ("XNORi", {InstrDescr {itype: InstrType::AluConst, args: 2, bytes: 2, base_word: 0xF800}}),
        ("ADDC", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0x8008}}),
        ("SUBC", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0x9008}}),
        ("TEQ", {InstrDescr {itype: InstrType::AluTest, args: 2, bytes: 2, base_word: 0xA008}}),
        ("TCM", {InstrDescr {itype: InstrType::AluTest, args: 2, bytes: 2, base_word: 0xB008}}),
        ("CMN", {InstrDescr {itype: InstrType::AluTest, args: 2, bytes: 2, base_word: 0xC008}}),
        ("CMP", {InstrDescr {itype: InstrType::AluTest, args: 2, bytes: 2, base_word: 0xD008}}),
        ("TST", {InstrDescr {itype: InstrType::AluTest, args: 2, bytes: 2, base_word: 0xE008}}),
        ("TIB", {InstrDescr {itype: InstrType::AluTest, args: 2, bytes: 2, base_word: 0xF008}}),
        ("SHL", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xA010}}),
        ("SHR", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xB010}}),
        ("ASHL", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xA018}}),
        ("ASHR", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xB018}}),
        ("ROLC", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xA014}}),
        ("RORC", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xB014}}),
        ("ROT", {InstrDescr {itype: InstrType::Alu, args: 3, bytes: 2, base_word: 0xC010}}),
        ("ROTi", {InstrDescr {itype: InstrType::AluRot, args: 3, bytes: 2, base_word: 0xD010}}),
        ("BSE", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0x8010}}),
        ("INV", {InstrDescr {itype: InstrType::AluOneSrc, args: 2, bytes: 2, base_word: 0xE010}}),
        ("LDir", {InstrDescr {itype: InstrType::MemIgpr, args: 2, bytes: 4, base_word: 0x2000}}),
        ("LDim", {InstrDescr {itype: InstrType::MemImp, args: 2, bytes: 4, base_word: 0x2800}}),
        ("LDd", {InstrDescr {itype: InstrType::MemDirect, args: 2, bytes: 4, base_word: 0x4000}}),
        ("STd", {InstrDescr {itype: InstrType::MemDirect, args: 2, bytes: 4, base_word: 0x5000}}),
        ("LD", {InstrDescr {itype: InstrType::Mem, args: 2, bytes: 4, base_word: 0x6000}}),
        ("ST", {InstrDescr {itype: InstrType::Mem, args: 2, bytes: 4, base_word: 0x7000}}),
        ("LDr", {InstrDescr {itype: InstrType::MemRo, args: 3, bytes: 2, base_word: 0x6008}}),
        ("STr", {InstrDescr {itype: InstrType::MemRo, args: 3, bytes: 2, base_word: 0x7008}}),
        ("LDo", {InstrDescr {itype: InstrType::MemIo, args: 3, bytes: 4, base_word: 0x600C}}),
        ("STo", {InstrDescr {itype: InstrType::MemIo, args: 3, bytes: 4, base_word: 0x700C}}),
        ("LDra", {InstrDescr {itype: InstrType::MemRo, args: 3, bytes: 2, base_word: 0x6010}}),
        ("STra", {InstrDescr {itype: InstrType::MemRo, args: 3, bytes: 2, base_word: 0x7010}}),
        ("LDoa", {InstrDescr {itype: InstrType::MemIo, args: 3, bytes: 4, base_word: 0x6014}}),
        ("SToa", {InstrDescr {itype: InstrType::MemIo, args: 3, bytes: 4, base_word: 0x7014}}),
        ("LDrb", {InstrDescr {itype: InstrType::MemRo, args: 3, bytes: 2, base_word: 0x6018}}),
        ("STrb", {InstrDescr {itype: InstrType::MemRo, args: 3, bytes: 2, base_word: 0x7018}}),
        ("LDob", {InstrDescr {itype: InstrType::MemIo, args: 3, bytes: 4, base_word: 0x601C}}),
        ("STob", {InstrDescr {itype: InstrType::MemIo, args: 3, bytes: 4, base_word: 0x701C}}),
        ("J", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1000}}),
        ("JZ", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1100}}),
        ("JN", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1200}}),        
        ("JO", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1400}}),
        ("JC", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1800}}),
        ("JNZ", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1E00}}),
        ("JNN", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1D00}}),
        ("JNO", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1B00}}),
        ("JNC", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1700}}),
        ("JSR", {InstrDescr {itype: InstrType::Jmp, args: 1, bytes: 4, base_word: 0x1F00}}),
        ("ADDp", {InstrDescr {itype: InstrType::AddrArithm, args: 1, bytes: 2, base_word: 0x0800}}),
        ("ADDpi", {InstrDescr {itype: InstrType::AddrArImm, args: 1, bytes: 4, base_word: 0x0900}}),
        ("MOV", {InstrDescr {itype: InstrType::Mov, args: 2, bytes: 2, base_word: 0x3000}}),
        ("MOVs", {InstrDescr {itype: InstrType::Movs, args: 2, bytes: 2, base_word: 0x3008}}),
        ("SETIM", {InstrDescr {itype: InstrType::Misc3bit, args: 1, bytes: 2, base_word: 0x0700}}),
        ("CLRIM", {InstrDescr {itype: InstrType::Misc3bit, args: 1, bytes: 2, base_word: 0x0600}}),
        ("SETPR", {InstrDescr {itype: InstrType::Misc3bit, args: 1, bytes: 2, base_word: 0x0500}}),
        ("EINT", {InstrDescr {itype: InstrType::Misc8bit, args: 1, bytes: 2, base_word: 0x0400}}),
        ("DMA", {InstrDescr {itype: InstrType::Misc, args: 0, bytes: 2, base_word: 0x0300}}),
        ("RST", {InstrDescr {itype: InstrType::Misc, args: 0, bytes: 2, base_word: 0x0200}}),
        ("HLT", {InstrDescr {itype: InstrType::Misc, args: 0, bytes: 2, base_word: 0x0100}}),
        ("NOP", {InstrDescr {itype: InstrType::Misc, args: 0, bytes: 2, base_word: 0x0000}}),
    ]);

    return instr_table;
}

